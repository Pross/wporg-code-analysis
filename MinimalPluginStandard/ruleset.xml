<?xml version="1.0"?>
<ruleset name="MinimalPluginStandard">
  <description>Minimal coding standards for WordPress plugins.</description>

	<exclude-pattern>/**/test/*</exclude-pattern>
	<exclude-pattern>/**/tests/*</exclude-pattern>
	<exclude-pattern>/**/vendor/*</exclude-pattern>
	<exclude-pattern>/**/integration/whichbrowser/data/*.php</exclude-pattern>

	<!-- Rule: The goto statement must never be used. -->
	<rule ref="Generic.PHP.DiscourageGoto">
		<type>error</type>
		<message>The "goto" language construct should not be used.</message>
	</rule>

	<!-- Rule: The eval() construct is very dangerous, and is impossible to secure. ... these must not be used. -->
	<rule ref="Squiz.PHP.Eval.Discouraged">
		<type>error</type>
		<message>eval() is a security risk so not allowed.</message>
	</rule>

	<!-- Rule: create_function() function, which internally performs an eval(),
		 is deprecated in PHP 7.2. ... these must not be used. -->
	<rule ref="WordPress.PHP.RestrictedPHPFunctions"/>

	<!-- Rules from WordPress-Extra -->

	<!-- alex: needs refining to reduce false positives
	  <rule ref="WordPress.Security.EscapeOutput"/>
	  -->

	<!-- Encourage use of wp_safe_redirect() to avoid open redirect vulnerabilities.
		 https://github.com/WordPress/WordPress-Coding-Standards/pull/1264 -->
	<rule ref="WordPress.Security.SafeRedirect"/>
	<rule ref="WordPress.Security.SafeRedirect.wp_redirect_wp_redirect">
	  <type>warning</type>
	  <message>wp_redirect() found.</message>
	</rule>


	<!-- Verify that a nonce check is done before using values in superglobals.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/73 -->
	<!-- alex: way too many FPs
	<rule ref="WordPress.Security.NonceVerification">
		  <exclude name="WordPress.Security.NonceVerification.Recommended"/>
	</rule>
	-->


	<!-- Other rules -->

	<rule ref="WordPress.DB.PreparedSQLPlaceholders">
		<exclude name="WordPress.DB.PreparedSQLPlaceholders.LikeWithoutWildcards"/>
		<exclude name="WordPress.DB.PreparedSQLPlaceholders.UnnecessaryPrepare"/>
		<exclude name="WordPress.DB.PreparedSQLPlaceholders.UnfinishedPrepare"/>
		<exclude name="WordPress.DB.PreparedSQLPlaceholders.MissingReplacements"/>
		<type>warning</type>
	</rule>

	<!-- alex: needs refining eg on nonce checks
	<rule ref="WordPress.Security.ValidatedSanitizedInput">
		<exclude name="WordPress.Security.ValidatedSanitizedInput.InputNotValidated"/>
		<exclude name="WordPress.Security.ValidatedSanitizedInput.MissingUnslash"/>
	</rule>
	-->


	<!-- Themes should be compatible with PHP 5.2 and higher. -->
	<config name="testVersion" value="5.2-"/>

	<exclude-pattern>*/tgm-plugin-activation/*</exclude-pattern>
	<exclude-pattern>*/freemius/*</exclude-pattern>
	<exclude-pattern>*/dompdf/*</exclude-pattern>
	<exclude-pattern>*/cmb2/*</exclude-pattern>
	<exclude-pattern>*/redux-framework/*</exclude-pattern>
	<exclude-pattern>*/vendor/*</exclude-pattern>
	<exclude-pattern>*/guzzlehttp/*</exclude-pattern>
	<exclude-pattern>*/vendors/*</exclude-pattern>
	<exclude-pattern>*/plugin-update-checker/*</exclude-pattern>
	<exclude-pattern>*/composer_directory/*</exclude-pattern>
	<exclude-pattern>*/node_modules/*</exclude-pattern>


	<!-- No PHP short open tags allowed. -->
	<!-- Covers: https://github.com/Otto42/theme-check/blob/master/checks/phpshort.php -->

	<rule ref="Generic.PHP.DisallowShortOpenTag">
		<type>warning</type>
	</rule>


	<!-- Alternative PHP open tags not allowed. -->
	<rule ref="Generic.PHP.DisallowAlternativePHPTags"/>

	<!-- No minification of scripts or files unless you provide original files. -->
	<!-- Covers: https://make.wordpress.org/themes/handbook/review/required/#stylesheets-and-scripts -->
	<rule ref="Internal.Tokenizer.Exception">
		<message>File appears to be minified and cannot be processed. The non-minified file must be included too.</message>
	</rule>


	<!-- No hard coding of scripts and styles. Everything should be enqueued. -->
	<!-- <rule ref="WordPress.WP.EnqueuedResources"/> -->

	<!-- Prevent path disclosure when using add_theme_page(). -->
	<!-- <rule ref="WordPress.Security.PluginMenuSlug"/> -->

	<!-- While most themes shouldn't query the database directly, if they do, it should be done correctly. -->
	<!-- Don't use the PHP database functions and classes, use the WP abstraction layer instead. -->
	<!-- <rule ref="WordPress.DB.RestrictedClasses"/>
	<rule ref="WordPress.DB.RestrictedFunctions"/> -->

	<!-- All SQL queries should be prepared as close to the time of querying the database as possible. -->
	<!-- <rule ref="WordPress.DB.PreparedSQL"/> -->

	<!-- Verify that placeholders in prepared queries are used correctly. -->
	<!-- <rule ref="WordPress.DB.PreparedSQLPlaceholders"/> -->

	<!-- Validate and/or sanitize untrusted data before entering into the database. -->
	<!-- <rule ref="WordPress.Security.ValidatedSanitizedInput">
		<exclude name="WordPress.Security.ValidatedSanitizedInput.InputNotValidated"/>
		<exclude name="WordPress.Security.ValidatedSanitizedInput.MissingUnslash"/>
		<type>warning</type>
	</rule> -->

	<!-- Nonces -->
	<!-- <rule ref="WordPress.Security.NonceVerification"/> -->

	<!-- All untrusted data should be escaped before output. -->
	<rule ref="WordPress.Security.EscapeOutput">
		<properties>
			<!-- Some common functions that might technically require output escaping, but rarely cause anything but false positives -->
			<property name="customAutoEscapedFunctions" type="array">
				<element key="__" value="__" />
				<element key="_e" value="_e" />
				<element key="_x" value="_x" />
				<element key="wp_create_nonce" value="wp_create_nonce" />
				<element key="plugin_dir_url" value="plugin_dir_url" />
				<element key="plugins_url" value="plugins_url" />
				<element key="admin_url" value="admin_url" />
				<element key="sanitize_text_field" value="sanitize_text_field" />
				<element key="sanitize_textarea_field" value="sanitize_textarea_field" />
				<element key="get_locale" value="get_locale" />
				<element key="get_bloginfo" value="get_bloginfo" /> <!-- only safe if 'display' filter is used -->
			</property>
		</properties>
		<type>warning</type>
	</rule>
	<rule ref="WordPress.Security.EscapeOutput.UnsafePrintingFunction">
		<type>warning</type>
	</rule>
	<!-- This one is for the developer, not us -->
	<rule ref="WordPress.Security.EscapeOutput.DeprecatedWhitelistCommentFound">
		<severity>0</severity>
	</rule>


	<!-- Prohibit the use of the backtick operator. -->
	<rule ref="Generic.PHP.BacktickOperator"/>

	<rule ref="Generic.PHP.ForbiddenFunctions">
		<!-- See https://codex.wordpress.org/Category:Private_Functions -->
		<properties>
			<property name="forbiddenFunctions" type="array" extend="true">
				<element key="_cleanup_header_comment" value="null"/>
				<element key="_get_plugin_data_markup_translate" value="null"/>
				<element key="_transition_post_status" value="null"/>
				<element key="_wp_post_revision_fields" value="null"/>
				<element key="do_shortcode_tag" value="null"/>
				<element key="get_post_type_labels" value="null"/>
				<element key="wp_get_sidebars_widgets" value="null"/>
				<element key="wp_get_widget_defaults" value="null"/>
				<element key="wp_unregister_GLOBALS" value="null"/>
			</property>
		</properties>
	</rule>

	<!-- Prohibit overwriting of WordPress global variables. DISABLED FOR NOW. -->
	<!-- <rule ref="WordPress.WP.GlobalVariablesOverride"/> -->

	<!-- Prohibit the use of the eval() PHP language construct. -->
	<!-- <rule ref="Squiz.PHP.Eval.Discouraged">
		<type>error</type>
		<message>eval() is a security risk so not allowed.</message>
	</rule> -->

	<!-- Prohibit the use of the `goto` PHP language construct. -->
	<!-- <rule ref="Generic.PHP.DiscourageGoto.Found">
		<type>error</type>
		<message>The "goto" language construct should not be used.</message>
	</rule> -->

	<!-- Verify that everything in the global namespace is prefixed. -->
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals"/>

	<!-- Check for code WP does better -->
	<!-- <rule ref="WordPress.WP.AlternativeFunctions">
		<exclude name="WordPress.WP.AlternativeFunctions.json_encode_json_encode"/>
	</rule> -->

	<!-- Check for use of deprecated WordPress classes, functions and function parameters. -->
	<rule ref="WordPress.WP.DeprecatedClasses"/>
	<rule ref="WordPress.WP.DeprecatedFunctions">
		<type>warning</type>
	</rule>
	<rule ref="WordPress.WP.DeprecatedParameters">
		<type>warning</type>
	</rule>

	<!-- Check for deprecated WordPress constants. -->
	<rule ref="WordPress.WP.DiscouragedConstants">
		<type>warning</type>
	</rule>

	<!-- Check for usage of deprecated parameter values in WP functions and provide alternative based on the parameter passed. -->
	<rule ref="WordPress.WP.DeprecatedParameterValues"/>

	<!-- Stop messing without timezone. -->
	<!-- <rule ref="WordPress.DateTime.RestrictedFunctions"/> -->


</ruleset>